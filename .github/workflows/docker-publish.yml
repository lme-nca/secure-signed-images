name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '22 14 * * *'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
# lets not do anything here in pull requests
#   pull_request:
#     branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  GHCR_SLUG: ghcr.io/lme-nca/secure-signed-images/
  # github.repository as <account>/<repo>
  # IMAGE_NAME: ${{ github.repository }}


permissions:  # added using https://github.com/step-security/secure-workflows
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: Java/Corretto 11/Dockerfile
            image: corretto_11
          - dockerfile: Java/Corretto 17/Dockerfile
            image: corretto_17
          - dockerfile: Java/Corretto 19/Dockerfile
            image: corretto_19
    runs-on: ubuntu-latest
    permissions:
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request' # probably can remove all these IF statements ?
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v2.8.1
        with:
          cosign-release: 'v1.13.1'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.image }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@4fad532b9fdbfb80f436784834374a1c11834153
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          file: ${{ matrix.dockerfile }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # Scan image for GitHub Security tab
      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@41f05d9ecffa2ed3f1580af306000f734b733e54
        with:
          image-ref: ${{ env.GHCR_SLUG }}${{ matrix.image }}:${{ steps.meta.outputs.version }}@${{ steps.build-and-push.outputs.digest }}
          format: 'sarif'
          ignore-unfixed: true
          output: 'trivy-results.sarif'
          
      # upload scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@ddccb873888234080b77e9bc2d4764d5ccaaccf9
        with:
          sarif_file: 'trivy-results.sarif'
      
      # Scan image for attestation
      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@41f05d9ecffa2ed3f1580af306000f734b733e54
        with:
          image-ref: ${{ env.GHCR_SLUG }}${{ matrix.image }}:${{ steps.meta.outputs.version }}@${{ steps.build-and-push.outputs.digest }}
          scan-type: 'image'
          format: 'cosign-vuln'
          output: 'vuln.json'
          ignore-unfixed: true

          
      # Generate sBOM for attestation
      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@41f05d9ecffa2ed3f1580af306000f734b733e54
        with:
          image-ref: ${{ env.GHCR_SLUG }}${{ matrix.image }}:${{ steps.meta.outputs.version }}@${{ steps.build-and-push.outputs.digest }}
          scan-type: 'image'
          format: 'cyclonedx'
          output: 'sbom.cdx.json'

      - name: Sign the scan
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ env.GHCR_SLUG }}${{ matrix.image }}:${{ steps.meta.outputs.version }}" | xargs -I {} cosign attest --type vuln --predicate vuln.json {}@${{ steps.build-and-push.outputs.digest }}
      

      - name: Sign the sBOM
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ env.GHCR_SLUG }}${{ matrix.image }}:${{ steps.meta.outputs.version }}" | xargs -I {} cosign attest --type cyclonedx --predicate sbom.cdx.json {}@${{ steps.build-and-push.outputs.digest }}
      

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ env.GHCR_SLUG }}${{ matrix.image }}:${{ steps.meta.outputs.version }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
        
